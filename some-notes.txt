ngModel directive used to assess value entered into form using {{ from.value | json}}

-> form is declared at the top inside form tag as #form="ngForm"
-> 2 way data binding [(1)]='2'
	
	1 -> ngModel
	2 -> references what ever has been added to the parent component in this case it 	is the data model

---------------
Copying form data
... = spread operator will copy what is in our the original data user setting and create a copy inside the user settings 

-------------- html

ngNativeValidate turns off web form validation because all web browsers validate and display different messages this

	-> add ngNativeValidate where ="ngForm" is to allow web validation 

-------------- css

	-> ng-untouched = losing focus of an specific section where we have css validation 			added 
	-> ng-touched = hovering, clicking etc, on an specific section
	-> ng-pristine = wild is empty
	-> ng-dirty = data added
	-> ng-valid
	-> ng-invalid 

--------------- validation styling

	Within in input we can add #nameField="ngModel"
	within same class form group add separate div and reference as 				[hidden]="nameField.valid || nameField.untouched" where name field is the class 	declared inside input and the .valid invalid, etc is the css validation


--------------- Submitting forms

	add a method in the component which is referenced in the template
	pass template referenced declared in the form into the method
	as (ngSubmit)="method(form)"

	-->

	to avoid complicated css selectors we can use classes and assign them or take them 	off as logic is met 
	
	- in input at a reference variable and use this inside logic to 

 <input id="name" class="form-control" name="nameInput" [(ngModel)]="userSetting.name" 
        required #nameField="ngModel" 
        [class.field-error]="form.submitted && nameField.invalid" /> 
		<!--template reference variable is #namefield="ngModel"-->
      <div [hidden]="!form.submitted || nameField.valid" 
        class="alert alert-danger">
        Please enter a name
      </div>
	..., etc

--------------- Handeling form control Events
		
	- (blur)="onBlur(nameField)" nameField type declaration inside component method 	is ngModel

	using angular events lets you use the full html5 events

--------------- creating a data service 
	
	-> ng g s whatever name
	
--------------- posting form using observables 
	
	-> posting to a server is an Asyncronos operation
		-> as we don't know how long we will be waiting for a response, slow 				network or server

	-> javascript they are called promises


	-> to get an observable to start working you need to call the subscribe method if
	 You don't it won't work 
		
		../..etc.subscribe(
			
		   result => ,
		   error =>
		)

	inside our data service we are using method of() from rjax passing back the 		userSetting data to create an observable